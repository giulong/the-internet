<style>
[role='textbox'] {
    border: 1px solid #ccc;
    margin: 5px 0;
    padding: 5px;
}

[role='button'] {
    background: #ccf;
    margin: 20px 0;
    padding: 5px;
    cursor: pointer;
}

[role='button']:hover {
    color: white;
}
</style>

<script>
function updateCounter() {
    const counter = document.getElementById('counter');
    counter.innerText = parseInt(counter.innerText) + 1;
}

</script>

<div>
  <h3>ARIA</h3>
  <p>
    Accessible Rich Internet Applications defines a way to make Web content and Web applications more accessible to people with disabilities.
    The <a href="https://www.w3.org/TR/aria-in-html/#firstrule" target="_blank">first rule of ARIA use</a> reads:
    <blockquote>
        If you can use a native HTML element or attribute with the semantics and behaviour you require already built in,
        instead of re-purposing an element and adding an ARIA role, state or property to make it accessible, then do so.
    </blockquote>

    <div>
        While native html elements already have built in ARIA roles, they cannot be retrieved with Javascript.
        The elements below break the rule above, but they serve as an example that automated tests can use to retrieve ARIA roles and attributes via Javascript.
    </div>
  </p>
  <hr>

  <div role="form" id="send-comment" aria-label="Add a comment">
    <div id="username" role="textbox" contenteditable="true" aria-placeholder="Username" aria-labelledby="input">Div used as an input</div>
    <div id="button" tabindex="0" role="button" aria-pressed="false" onclick="updateCounter()">Div used as a button</div>
    <div id="separator" role="separator"><hr></div>
    <div>Clicks: <span id="counter">0</span></div>
  </div>
</div>
